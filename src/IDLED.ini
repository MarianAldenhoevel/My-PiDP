set cpu 11/70,4M
;set realcons=localhost
;set realcons panel=11/70
;set realcons interval=8
;set realcons connected


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                      ;;
;;  IDLED - Idle LED pattern generator  ;;
;;                                      ;;
;;     Copyright (c) Mike Hill 2018     ;;
;;         All Rights Reserved          ;;
;;                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Synopsis:-
;
;    The goal of this simple program is to showcase the instruction set and
;    addressing modes of the PDP-11 and specifically show off the console of
;    the PDP-11/70 with its lights and switches.  It will probably run on
;    any PDP-11 which has a switch register, but may not work as expected.
;    Changing the patterns is very easy to do directly from the front-panel.
;
; Console operation:-
;
;    Use switches 5-0 to set the update speed of the LEDs in the DATA display
;    Turn switch 7 ON to also increment (by 2) the LEDs in the ADDRESS display
;    Rotate the DATA knob to DATA PATHS or DISPLAY REGISTER for two LED modes.
;
; Reference:-
;
;    PDP-11 Programming Card (EH-S1046-78)
;    Search for "EH-S1046-78" on the web to find a copy
;
; Notes about instructions:-
;
;        Type      Example of use
;    ------------  --------------
;    No operands   000  NOP
;    One operand   054  TSTB R3
;    Two operands  034  MOV #177570,R4
;    Branch        056  BPL 104
;
; Notes about addressing modes:-
;
;              Mode               Format  Example of use
;    ---------------------------  ------  --------------
;    0 - Register                 Rn      054  TSTB R3
;    1 - Register deferred        (Rn)    130  JMP (R5)
;    2 - Auto-increment           (Rn)+   144  ASLB (R1)+
;    3 - Auto-increment deferred  @(Rn)+  n/a
;    4 - Auto-decrement           -(Rn)   152  DEC -(R1)
;    5 - Auto-decrement deferred  @-(Rn)  n/a
;    6 - Index                    A(Rn)   072  MOV (R0)+,-14(SP)
;    7 - Index deferred           @A(Rn)  n/a
;
; Notes about PC addressing modes:-
;
;    2 - Immediate                #n      030  MOV #400,R5
;    3 - Absolute                 @#A     114  MOV #100,@#177546
;    6 - Relative                 A       016  MOVB 006,2(SP)
;    7 - Relative deferred        @A      n/a
;
;    Note that odd addressing modes are the indirect version of the even modes
;
; Interrupt programming:-
;
;                Type                 Vec  Target            Comments
;    -------------------------------  ---  ------  ----------------------------
;    Time-out/odd-address             004  000014
;    Illegal & reserved instructions  010  000174  (used to initialize the PSW)
;    Power-fail                       024  000002  (also an RTI instruction)
;    Line-time clock                  100  000132
;    Memory system (parity) error     114  012737  (cause an odd-address error)
;
; Programming techniques:-
;
;                       Method                        Adr     Instruction
;    -----------------------------------------------  ---  ------------------
;    Bootstrap protocol                               000  NOP
;    Combining condition code instructions            014  SEZ SEV
;    Using relative addressing                        016  MOVB 006,2(SP)
;    Dual use of an instruction as a vector           024  RTI
;    Using the stack pointer [sort of] as a register  064  MOV R2,(SP)+
;    Using a second word as immediate data            050  MOV (PC)+,-(R5)
;    Setting a turnaround point at the end of memory  072  MOV (R0)+,-14(SP)
;    Skip past two words (like BR .+6)                076  BITB #132,@#340
;    Turn on (enable) clock interrupts                114  MOV #100,@#177546
;    Start WAITing (use a register to jump)           130  JMP (R5)
;    Use an instruction as data                       170  MOV (PC),SP
;    Cause an interrupt to set the PSW                172  BR 4
;
; Program flow:-
;
;    000  Start (bootstrap) address - no operation and bootstrap identifier
;    002  Restart address - which will branch to 170
;    170  Load [what we hope is the kernel] stack pointer
;    172  Branch to 004 which is a reserved instruction so ...
;    004  ... load the PSW with the contents of 012 and interrupt to 174
;    174  Load what is certainly the kernel SP and branch to SETUP
;    030  Define where the single-mode WAIT loop will be
;    034  Point to the switch and display register in the I/O page
;     .
;     .   [Have fun finding out the rest for yourself]
;     .
;    114  Enable line-time clock interrupts (interrupts are still disabled)
;    122  Set R2 to zero
;    124  Enable BR6 (i.e. the line-time clock) interrupts and set R2 to -2
;    130  Jump to the WAIT loop and start waiting
;
; IDLE patterns (initial pattern at address 104):-
;
;         RSX11M/M+        IAS       Rotate       Rotate
;    Adr  Idle loop     Idle Loop     Left         Right
;    ---  ----------    ---------   --------    -----------
;    144  ASLB (R1)+    BMI 150     ASL (R1)    MOV (R1),R2
;    146  RORB (R1)     SEC         NOP         ASR R2
;    150  ADCB -(R1)    ROL (R1)    ADC (R1)    ROR (R1)
;
; Display register patterns (intital pattern generated at 112):-
;
;    152  DEC -(R1)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                ;;
;;  IDLED Source Code (default RSX idle pattern)  ;;
;;                                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Comments with '=' show sections which map vectors or stack address onto the
; same address as instructions.  These are commented with '**'.
;
; ----- VECTORS -----
D 000 NOP
D 002 BR 170
; ** VEC4: Time-out and odd-address errors
D 004 000014
D 006 000357
; ** VEC10: Illegal & reserved instructions
D 010 000174
D 012 000341
; ===== TRAP4 =====
D 014 SEZ SEV
D 016 MOVB 006,2(SP)
; ** VEC24: power-fail vector
D 024 RTI
D 024 000002
D 026 000340
; ----- SETUP -----
D 030 MOV #400,R5
D 034 MOV #177570,R4
D 040 MOV (R4),R3
D 042 MOV #130,R0
D 046 MOV (R0),(R5)
D 050 MOV (PC)+,-(R5)
D 052 WAIT
D 054 TSTB R3
D 056 BPL 104
; ----- FILMEM -----
D 060 MOV R5,SP
D 062 MOV (R5),R2
D 064 MOV R2,(SP)+
D 066 BIC (SP),(SP)
D 070 BPL 64
D 072 MOV (R0)+,-14(SP)
; ===== VEC100 =====
D 076 BITB #132,@#340
; ** VEC100: Line-time clock vector
D 100 000132
D 102 000340
; ----- SETPAT -----
D 104 MOV #170017,-(SP)
D 110 MOV SP,R1
D 112 CLR -(SP)
; ===== ENACLK =====
; ** VEC114: Memory system (parity) error
D 114 MOV #100,@#177546
D 122 CLR R2
D 124 MOV #140246,-(R2)
D 130 JMP (R5)
; ----- CLKINT -----
D 132 CMPB (R4),R3
D 134 BNE 174
D 136 DECB R2
D 140 BPL 166
D 142 MOV (R1),R0
D 144 ASLB (R1)+
D 146 RORB (R1)
D 150 ADCB -(R1)
D 152 DEC -(R1)
D 154 MOV (R1)+,(R4)
D 156 MOV R3,R2
D 160 COMB R2
D 162 BICB #133300,R2
D 166 RTI
; ===== INITSP =====
D 170 MOV (PC),SP
D 172 000704
D 172 BR 4
D 174 MOV (PC),SP
D 176 000714
D 176 BR 30
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                          ;;
;;  Optionally choose the IAS idle pattern  ;;
;;  (Uncomment the following 4 'D' lines)   ;;
;;                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;D 104 MOV #1,-(SP)
;D 144 BMI 150
;D 146 SEC
;D 150 ROL (R1)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                           ;;
;;  Initialize and start the SIMH processor  ;;
;;                                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
RESET ALL
SET CPU IDLE
D PSW 000340
D PC  000000
GO    000000
;
; END-OF-FILE


